{"version":3,"file":"echo-react.iife.js","sources":["../../laravel-echo/dist/echo.js","../src/config/index.ts","../src/util/index.ts","../src/hooks/use-echo.ts"],"sourcesContent":["class l {\n  /**\n   * Listen for a whisper event on the channel instance.\n   */\n  listenForWhisper(e, t) {\n    return this.listen(\".client-\" + e, t);\n  }\n  /**\n   * Listen for an event on the channel instance.\n   */\n  notification(e) {\n    return this.listen(\n      \".Illuminate\\\\Notifications\\\\Events\\\\BroadcastNotificationCreated\",\n      e\n    );\n  }\n  /**\n   * Stop listening for a whisper event on the channel instance.\n   */\n  stopListeningForWhisper(e, t) {\n    return this.stopListening(\".client-\" + e, t);\n  }\n}\nclass d {\n  /**\n   * Create a new class instance.\n   */\n  constructor(e) {\n    this.namespace = e;\n  }\n  /**\n   * Format the given event name.\n   */\n  format(e) {\n    return [\".\", \"\\\\\"].includes(e.charAt(0)) ? e.substring(1) : (this.namespace && (e = this.namespace + \".\" + e), e.replace(/\\./g, \"\\\\\"));\n  }\n  /**\n   * Set the event namespace.\n   */\n  setNamespace(e) {\n    this.namespace = e;\n  }\n}\nfunction w(n) {\n  try {\n    new n();\n  } catch (e) {\n    if (e instanceof Error && e.message.includes(\"is not a constructor\"))\n      return !1;\n  }\n  return !0;\n}\nclass u extends l {\n  /**\n   * Create a new class instance.\n   */\n  constructor(e, t, s) {\n    super(), this.name = t, this.pusher = e, this.options = s, this.eventFormatter = new d(this.options.namespace), this.subscribe();\n  }\n  /**\n   * Subscribe to a Pusher channel.\n   */\n  subscribe() {\n    this.subscription = this.pusher.subscribe(this.name);\n  }\n  /**\n   * Unsubscribe from a Pusher channel.\n   */\n  unsubscribe() {\n    this.pusher.unsubscribe(this.name);\n  }\n  /**\n   * Listen for an event on the channel instance.\n   */\n  listen(e, t) {\n    return this.on(this.eventFormatter.format(e), t), this;\n  }\n  /**\n   * Listen for all events on the channel instance.\n   */\n  listenToAll(e) {\n    return this.subscription.bind_global((t, s) => {\n      if (t.startsWith(\"pusher:\"))\n        return;\n      let r = String(this.options.namespace ?? \"\").replace(\n        /\\./g,\n        \"\\\\\"\n      ), a = t.startsWith(r) ? t.substring(r.length + 1) : \".\" + t;\n      e(a, s);\n    }), this;\n  }\n  /**\n   * Stop listening for an event on the channel instance.\n   */\n  stopListening(e, t) {\n    return t ? this.subscription.unbind(\n      this.eventFormatter.format(e),\n      t\n    ) : this.subscription.unbind(this.eventFormatter.format(e)), this;\n  }\n  /**\n   * Stop listening for all events on the channel instance.\n   */\n  stopListeningToAll(e) {\n    return e ? this.subscription.unbind_global(e) : this.subscription.unbind_global(), this;\n  }\n  /**\n   * Register a callback to be called anytime a subscription succeeds.\n   */\n  subscribed(e) {\n    return this.on(\"pusher:subscription_succeeded\", () => {\n      e();\n    }), this;\n  }\n  /**\n   * Register a callback to be called anytime a subscription error occurs.\n   */\n  error(e) {\n    return this.on(\"pusher:subscription_error\", (t) => {\n      e(t);\n    }), this;\n  }\n  /**\n   * Bind a channel to an event.\n   */\n  on(e, t) {\n    return this.subscription.bind(e, t), this;\n  }\n}\nclass f extends u {\n  /**\n   * Send a whisper event to other clients in the channel.\n   */\n  whisper(e, t) {\n    return this.pusher.channels.channels[this.name].trigger(\n      `client-${e}`,\n      t\n    ), this;\n  }\n}\nclass g extends u {\n  /**\n   * Send a whisper event to other clients in the channel.\n   */\n  whisper(e, t) {\n    return this.pusher.channels.channels[this.name].trigger(\n      `client-${e}`,\n      t\n    ), this;\n  }\n}\nclass y extends f {\n  /**\n   * Register a callback to be called anytime the member list changes.\n   */\n  here(e) {\n    return this.on(\"pusher:subscription_succeeded\", (t) => {\n      e(Object.keys(t.members).map((s) => t.members[s]));\n    }), this;\n  }\n  /**\n   * Listen for someone joining the channel.\n   */\n  joining(e) {\n    return this.on(\"pusher:member_added\", (t) => {\n      e(t.info);\n    }), this;\n  }\n  /**\n   * Send a whisper event to other clients in the channel.\n   */\n  whisper(e, t) {\n    return this.pusher.channels.channels[this.name].trigger(\n      `client-${e}`,\n      t\n    ), this;\n  }\n  /**\n   * Listen for someone leaving the channel.\n   */\n  leaving(e) {\n    return this.on(\"pusher:member_removed\", (t) => {\n      e(t.info);\n    }), this;\n  }\n}\nclass b extends l {\n  /**\n   * Create a new class instance.\n   */\n  constructor(e, t, s) {\n    super(), this.events = {}, this.listeners = {}, this.name = t, this.socket = e, this.options = s, this.eventFormatter = new d(this.options.namespace), this.subscribe();\n  }\n  /**\n   * Subscribe to a Socket.io channel.\n   */\n  subscribe() {\n    this.socket.emit(\"subscribe\", {\n      channel: this.name,\n      auth: this.options.auth || {}\n    });\n  }\n  /**\n   * Unsubscribe from channel and ubind event callbacks.\n   */\n  unsubscribe() {\n    this.unbind(), this.socket.emit(\"unsubscribe\", {\n      channel: this.name,\n      auth: this.options.auth || {}\n    });\n  }\n  /**\n   * Listen for an event on the channel instance.\n   */\n  listen(e, t) {\n    return this.on(this.eventFormatter.format(e), t), this;\n  }\n  /**\n   * Stop listening for an event on the channel instance.\n   */\n  stopListening(e, t) {\n    return this.unbindEvent(this.eventFormatter.format(e), t), this;\n  }\n  /**\n   * Register a callback to be called anytime a subscription succeeds.\n   */\n  subscribed(e) {\n    return this.on(\"connect\", (t) => {\n      e(t);\n    }), this;\n  }\n  /**\n   * Register a callback to be called anytime an error occurs.\n   */\n  error(e) {\n    return this;\n  }\n  /**\n   * Bind the channel's socket to an event and store the callback.\n   */\n  on(e, t) {\n    return this.listeners[e] = this.listeners[e] || [], this.events[e] || (this.events[e] = (s, r) => {\n      this.name === s && this.listeners[e] && this.listeners[e].forEach((a) => a(r));\n    }, this.socket.on(e, this.events[e])), this.listeners[e].push(t), this;\n  }\n  /**\n   * Unbind the channel's socket from all stored event callbacks.\n   */\n  unbind() {\n    Object.keys(this.events).forEach((e) => {\n      this.unbindEvent(e);\n    });\n  }\n  /**\n   * Unbind the listeners for the given event.\n   */\n  unbindEvent(e, t) {\n    this.listeners[e] = this.listeners[e] || [], t && (this.listeners[e] = this.listeners[e].filter(\n      (s) => s !== t\n    )), (!t || this.listeners[e].length === 0) && (this.events[e] && (this.socket.removeListener(e, this.events[e]), delete this.events[e]), delete this.listeners[e]);\n  }\n}\nclass v extends b {\n  /**\n   * Send a whisper event to other clients in the channel.\n   */\n  whisper(e, t) {\n    return this.socket.emit(\"client event\", {\n      channel: this.name,\n      event: `client-${e}`,\n      data: t\n    }), this;\n  }\n}\nclass m extends v {\n  /**\n   * Register a callback to be called anytime the member list changes.\n   */\n  here(e) {\n    return this.on(\"presence:subscribed\", (t) => {\n      e(t.map((s) => s.user_info));\n    }), this;\n  }\n  /**\n   * Listen for someone joining the channel.\n   */\n  joining(e) {\n    return this.on(\n      \"presence:joining\",\n      (t) => e(t.user_info)\n    ), this;\n  }\n  /**\n   * Send a whisper event to other clients in the channel.\n   */\n  whisper(e, t) {\n    return this.socket.emit(\"client event\", {\n      channel: this.name,\n      event: `client-${e}`,\n      data: t\n    }), this;\n  }\n  /**\n   * Listen for someone leaving the channel.\n   */\n  leaving(e) {\n    return this.on(\n      \"presence:leaving\",\n      (t) => e(t.user_info)\n    ), this;\n  }\n}\nclass h extends l {\n  /**\n   * Subscribe to a channel.\n   */\n  subscribe() {\n  }\n  /**\n   * Unsubscribe from a channel.\n   */\n  unsubscribe() {\n  }\n  /**\n   * Listen for an event on the channel instance.\n   */\n  listen(e, t) {\n    return this;\n  }\n  /**\n   * Listen for all events on the channel instance.\n   */\n  listenToAll(e) {\n    return this;\n  }\n  /**\n   * Stop listening for an event on the channel instance.\n   */\n  stopListening(e, t) {\n    return this;\n  }\n  /**\n   * Register a callback to be called anytime a subscription succeeds.\n   */\n  subscribed(e) {\n    return this;\n  }\n  /**\n   * Register a callback to be called anytime an error occurs.\n   */\n  error(e) {\n    return this;\n  }\n  /**\n   * Bind a channel to an event.\n   */\n  on(e, t) {\n    return this;\n  }\n}\nclass k extends h {\n  /**\n   * Send a whisper event to other clients in the channel.\n   */\n  whisper(e, t) {\n    return this;\n  }\n}\nclass _ extends h {\n  /**\n   * Send a whisper event to other clients in the channel.\n   */\n  whisper(e, t) {\n    return this;\n  }\n}\nclass C extends k {\n  /**\n   * Register a callback to be called anytime the member list changes.\n   */\n  here(e) {\n    return this;\n  }\n  /**\n   * Listen for someone joining the channel.\n   */\n  joining(e) {\n    return this;\n  }\n  /**\n   * Send a whisper event to other clients in the channel.\n   */\n  whisper(e, t) {\n    return this;\n  }\n  /**\n   * Listen for someone leaving the channel.\n   */\n  leaving(e) {\n    return this;\n  }\n}\nconst c = class c {\n  /**\n   * Create a new class instance.\n   */\n  constructor(e) {\n    this.setOptions(e), this.connect();\n  }\n  /**\n   * Merge the custom options with the defaults.\n   */\n  setOptions(e) {\n    this.options = {\n      ...c._defaultOptions,\n      ...e,\n      broadcaster: e.broadcaster\n    };\n    let t = this.csrfToken();\n    t && (this.options.auth.headers[\"X-CSRF-TOKEN\"] = t, this.options.userAuthentication.headers[\"X-CSRF-TOKEN\"] = t), t = this.options.bearerToken, t && (this.options.auth.headers.Authorization = \"Bearer \" + t, this.options.userAuthentication.headers.Authorization = \"Bearer \" + t);\n  }\n  /**\n   * Extract the CSRF token from the page.\n   */\n  csrfToken() {\n    var e, t;\n    return typeof window < \"u\" && ((e = window.Laravel) != null && e.csrfToken) ? window.Laravel.csrfToken : this.options.csrfToken ? this.options.csrfToken : typeof document < \"u\" && typeof document.querySelector == \"function\" ? ((t = document.querySelector('meta[name=\"csrf-token\"]')) == null ? void 0 : t.getAttribute(\"content\")) ?? null : null;\n  }\n};\nc._defaultOptions = {\n  auth: {\n    headers: {}\n  },\n  authEndpoint: \"/broadcasting/auth\",\n  userAuthentication: {\n    endpoint: \"/broadcasting/user-auth\",\n    headers: {}\n  },\n  csrfToken: null,\n  bearerToken: null,\n  host: null,\n  key: null,\n  namespace: \"App.Events\"\n};\nlet i = c;\nclass o extends i {\n  constructor() {\n    super(...arguments), this.channels = {};\n  }\n  /**\n   * Create a fresh Pusher connection.\n   */\n  connect() {\n    if (typeof this.options.client < \"u\")\n      this.pusher = this.options.client;\n    else if (this.options.Pusher)\n      this.pusher = new this.options.Pusher(\n        this.options.key,\n        this.options\n      );\n    else if (typeof window < \"u\" && typeof window.Pusher < \"u\")\n      this.pusher = new window.Pusher(this.options.key, this.options);\n    else\n      throw new Error(\n        \"Pusher client not found. Should be globally available or passed via options.client\"\n      );\n  }\n  /**\n   * Sign in the user via Pusher user authentication (https://pusher.com/docs/channels/using_channels/user-authentication/).\n   */\n  signin() {\n    this.pusher.signin();\n  }\n  /**\n   * Listen for an event on a channel instance.\n   */\n  listen(e, t, s) {\n    return this.channel(e).listen(t, s);\n  }\n  /**\n   * Get a channel instance by name.\n   */\n  channel(e) {\n    return this.channels[e] || (this.channels[e] = new u(\n      this.pusher,\n      e,\n      this.options\n    )), this.channels[e];\n  }\n  /**\n   * Get a private channel instance by name.\n   */\n  privateChannel(e) {\n    return this.channels[\"private-\" + e] || (this.channels[\"private-\" + e] = new f(\n      this.pusher,\n      \"private-\" + e,\n      this.options\n    )), this.channels[\"private-\" + e];\n  }\n  /**\n   * Get a private encrypted channel instance by name.\n   */\n  encryptedPrivateChannel(e) {\n    return this.channels[\"private-encrypted-\" + e] || (this.channels[\"private-encrypted-\" + e] = new g(\n      this.pusher,\n      \"private-encrypted-\" + e,\n      this.options\n    )), this.channels[\"private-encrypted-\" + e];\n  }\n  /**\n   * Get a presence channel instance by name.\n   */\n  presenceChannel(e) {\n    return this.channels[\"presence-\" + e] || (this.channels[\"presence-\" + e] = new y(\n      this.pusher,\n      \"presence-\" + e,\n      this.options\n    )), this.channels[\"presence-\" + e];\n  }\n  /**\n   * Leave the given channel, as well as its private and presence variants.\n   */\n  leave(e) {\n    [\n      e,\n      \"private-\" + e,\n      \"private-encrypted-\" + e,\n      \"presence-\" + e\n    ].forEach((s) => {\n      this.leaveChannel(s);\n    });\n  }\n  /**\n   * Leave the given channel.\n   */\n  leaveChannel(e) {\n    this.channels[e] && (this.channels[e].unsubscribe(), delete this.channels[e]);\n  }\n  /**\n   * Get the socket ID for the connection.\n   */\n  socketId() {\n    return this.pusher.connection.socket_id;\n  }\n  /**\n   * Disconnect Pusher connection.\n   */\n  disconnect() {\n    this.pusher.disconnect();\n  }\n}\nclass I extends i {\n  constructor() {\n    super(...arguments), this.channels = {};\n  }\n  /**\n   * Create a fresh Socket.io connection.\n   */\n  connect() {\n    let e = this.getSocketIO();\n    this.socket = e(\n      this.options.host ?? void 0,\n      this.options\n    ), this.socket.io.on(\"reconnect\", () => {\n      Object.values(this.channels).forEach((t) => {\n        t.subscribe();\n      });\n    });\n  }\n  /**\n   * Get socket.io module from global scope or options.\n   */\n  getSocketIO() {\n    if (typeof this.options.client < \"u\")\n      return this.options.client;\n    if (typeof window < \"u\" && typeof window.io < \"u\")\n      return window.io;\n    throw new Error(\n      \"Socket.io client not found. Should be globally available or passed via options.client\"\n    );\n  }\n  /**\n   * Listen for an event on a channel instance.\n   */\n  listen(e, t, s) {\n    return this.channel(e).listen(t, s);\n  }\n  /**\n   * Get a channel instance by name.\n   */\n  channel(e) {\n    return this.channels[e] || (this.channels[e] = new b(\n      this.socket,\n      e,\n      this.options\n    )), this.channels[e];\n  }\n  /**\n   * Get a private channel instance by name.\n   */\n  privateChannel(e) {\n    return this.channels[\"private-\" + e] || (this.channels[\"private-\" + e] = new v(\n      this.socket,\n      \"private-\" + e,\n      this.options\n    )), this.channels[\"private-\" + e];\n  }\n  /**\n   * Get a presence channel instance by name.\n   */\n  presenceChannel(e) {\n    return this.channels[\"presence-\" + e] || (this.channels[\"presence-\" + e] = new m(\n      this.socket,\n      \"presence-\" + e,\n      this.options\n    )), this.channels[\"presence-\" + e];\n  }\n  /**\n   * Leave the given channel, as well as its private and presence variants.\n   */\n  leave(e) {\n    [e, \"private-\" + e, \"presence-\" + e].forEach((s) => {\n      this.leaveChannel(s);\n    });\n  }\n  /**\n   * Leave the given channel.\n   */\n  leaveChannel(e) {\n    this.channels[e] && (this.channels[e].unsubscribe(), delete this.channels[e]);\n  }\n  /**\n   * Get the socket ID for the connection.\n   */\n  socketId() {\n    return this.socket.id;\n  }\n  /**\n   * Disconnect Socketio connection.\n   */\n  disconnect() {\n    this.socket.disconnect();\n  }\n}\nclass p extends i {\n  constructor() {\n    super(...arguments), this.channels = {};\n  }\n  /**\n   * Create a fresh connection.\n   */\n  connect() {\n  }\n  /**\n   * Listen for an event on a channel instance.\n   */\n  listen(e, t, s) {\n    return new h();\n  }\n  /**\n   * Get a channel instance by name.\n   */\n  channel(e) {\n    return new h();\n  }\n  /**\n   * Get a private channel instance by name.\n   */\n  privateChannel(e) {\n    return new k();\n  }\n  /**\n   * Get a private encrypted channel instance by name.\n   */\n  encryptedPrivateChannel(e) {\n    return new _();\n  }\n  /**\n   * Get a presence channel instance by name.\n   */\n  presenceChannel(e) {\n    return new C();\n  }\n  /**\n   * Leave the given channel, as well as its private and presence variants.\n   */\n  leave(e) {\n  }\n  /**\n   * Leave the given channel.\n   */\n  leaveChannel(e) {\n  }\n  /**\n   * Get the socket ID for the connection.\n   */\n  socketId() {\n    return \"fake-socket-id\";\n  }\n  /**\n   * Disconnect the connection.\n   */\n  disconnect() {\n  }\n}\nclass E {\n  /**\n   * Create a new class instance.\n   */\n  constructor(e) {\n    this.options = e, this.connect(), this.options.withoutInterceptors || this.registerInterceptors();\n  }\n  /**\n   * Get a channel instance by name.\n   */\n  channel(e) {\n    return this.connector.channel(e);\n  }\n  /**\n   * Create a new connection.\n   */\n  connect() {\n    if (this.options.broadcaster === \"reverb\")\n      this.connector = new o({\n        ...this.options,\n        cluster: \"\"\n      });\n    else if (this.options.broadcaster === \"pusher\")\n      this.connector = new o(this.options);\n    else if (this.options.broadcaster === \"ably\")\n      this.connector = new o({\n        ...this.options,\n        cluster: \"\",\n        broadcaster: \"pusher\"\n      });\n    else if (this.options.broadcaster === \"socket.io\")\n      this.connector = new I(this.options);\n    else if (this.options.broadcaster === \"null\")\n      this.connector = new p(this.options);\n    else if (typeof this.options.broadcaster == \"function\" && w(this.options.broadcaster))\n      this.connector = new this.options.broadcaster(this.options);\n    else\n      throw new Error(\n        `Broadcaster ${typeof this.options.broadcaster} ${String(this.options.broadcaster)} is not supported.`\n      );\n  }\n  /**\n   * Disconnect from the Echo server.\n   */\n  disconnect() {\n    this.connector.disconnect();\n  }\n  /**\n   * Get a presence channel instance by name.\n   */\n  join(e) {\n    return this.connector.presenceChannel(e);\n  }\n  /**\n   * Leave the given channel, as well as its private and presence variants.\n   */\n  leave(e) {\n    this.connector.leave(e);\n  }\n  /**\n   * Leave the given channel.\n   */\n  leaveChannel(e) {\n    this.connector.leaveChannel(e);\n  }\n  /**\n   * Leave all channels.\n   */\n  leaveAllChannels() {\n    for (const e in this.connector.channels)\n      this.leaveChannel(e);\n  }\n  /**\n   * Listen for an event on a channel instance.\n   */\n  listen(e, t, s) {\n    return this.connector.listen(e, t, s);\n  }\n  /**\n   * Get a private channel instance by name.\n   */\n  private(e) {\n    return this.connector.privateChannel(e);\n  }\n  /**\n   * Get a private encrypted channel instance by name.\n   */\n  encryptedPrivate(e) {\n    if (this.connectorSupportsEncryptedPrivateChannels(this.connector))\n      return this.connector.encryptedPrivateChannel(e);\n    throw new Error(\n      `Broadcaster ${typeof this.options.broadcaster} ${String(\n        this.options.broadcaster\n      )} does not support encrypted private channels.`\n    );\n  }\n  connectorSupportsEncryptedPrivateChannels(e) {\n    return e instanceof o || e instanceof p;\n  }\n  /**\n   * Get the Socket ID for the connection.\n   */\n  socketId() {\n    return this.connector.socketId();\n  }\n  /**\n   * Register 3rd party request interceptiors. These are used to automatically\n   * send a connections socket id to a Laravel app with a X-Socket-Id header.\n   */\n  registerInterceptors() {\n    typeof Vue < \"u\" && (Vue != null && Vue.http) && this.registerVueRequestInterceptor(), typeof axios == \"function\" && this.registerAxiosRequestInterceptor(), typeof jQuery == \"function\" && this.registerjQueryAjaxSetup(), typeof Turbo == \"object\" && this.registerTurboRequestInterceptor();\n  }\n  /**\n   * Register a Vue HTTP interceptor to add the X-Socket-ID header.\n   */\n  registerVueRequestInterceptor() {\n    Vue.http.interceptors.push(\n      (e, t) => {\n        this.socketId() && e.headers.set(\"X-Socket-ID\", this.socketId()), t();\n      }\n    );\n  }\n  /**\n   * Register an Axios HTTP interceptor to add the X-Socket-ID header.\n   */\n  registerAxiosRequestInterceptor() {\n    axios.interceptors.request.use(\n      (e) => (this.socketId() && (e.headers[\"X-Socket-Id\"] = this.socketId()), e)\n    );\n  }\n  /**\n   * Register jQuery AjaxPrefilter to add the X-Socket-ID header.\n   */\n  registerjQueryAjaxSetup() {\n    typeof jQuery.ajax < \"u\" && jQuery.ajaxPrefilter(\n      (e, t, s) => {\n        this.socketId() && s.setRequestHeader(\"X-Socket-Id\", this.socketId());\n      }\n    );\n  }\n  /**\n   * Register the Turbo Request interceptor to add the X-Socket-ID header.\n   */\n  registerTurboRequestInterceptor() {\n    document.addEventListener(\n      \"turbo:before-fetch-request\",\n      (e) => {\n        e.detail.fetchOptions.headers[\"X-Socket-Id\"] = this.socketId();\n      }\n    );\n  }\n}\nexport {\n  l as Channel,\n  i as Connector,\n  d as EventFormatter,\n  E as default\n};\n//# sourceMappingURL=echo.js.map\n","import Echo, { type BroadcastDriver, type EchoOptions } from \"laravel-echo\";\nimport Pusher from \"pusher-js\";\nimport type { ConfigDefaults } from \"../types\";\n\nlet echoInstance: Echo<BroadcastDriver> | null = null;\nlet echoConfig: EchoOptions<BroadcastDriver> | null = null;\n\nconst getEchoInstance = <T extends BroadcastDriver>(): Echo<T> => {\n    if (echoInstance) {\n        return echoInstance as Echo<T>;\n    }\n\n    if (!echoConfig) {\n        throw new Error(\n            \"Echo has not been configured. Please call `configureEcho()`.\",\n        );\n    }\n\n    echoConfig.Pusher ??= Pusher;\n\n    echoInstance = new Echo(echoConfig);\n\n    return echoInstance as Echo<T>;\n};\n\n/**\n * Configure the Echo instance with sensible defaults.\n *\n * @link https://laravel.com/docs/broadcasting#client-side-installation\n */\nexport const configureEcho = <T extends BroadcastDriver>(\n    config: EchoOptions<T>,\n): void => {\n    const defaults: ConfigDefaults<BroadcastDriver> = {\n        reverb: {\n            broadcaster: \"reverb\",\n            key: import.meta.env.VITE_REVERB_APP_KEY,\n            wsHost: import.meta.env.VITE_REVERB_HOST,\n            wsPort: import.meta.env.VITE_REVERB_PORT,\n            wssPort: import.meta.env.VITE_REVERB_PORT,\n            forceTLS:\n                (import.meta.env.VITE_REVERB_SCHEME ?? \"https\") === \"https\",\n            enabledTransports: [\"ws\", \"wss\"],\n        },\n        pusher: {\n            broadcaster: \"pusher\",\n            key: import.meta.env.VITE_PUSHER_APP_KEY,\n            cluster: import.meta.env.VITE_PUSHER_APP_CLUSTER,\n            forceTLS: true,\n            wsHost: import.meta.env.VITE_PUSHER_HOST,\n            wsPort: import.meta.env.VITE_PUSHER_PORT,\n            wssPort: import.meta.env.VITE_PUSHER_PORT,\n            enabledTransports: [\"ws\", \"wss\"],\n        },\n        \"socket.io\": {\n            broadcaster: \"socket.io\",\n            host: import.meta.env.VITE_SOCKET_IO_HOST,\n        },\n        null: {\n            broadcaster: \"null\",\n        },\n        ably: {\n            broadcaster: \"pusher\",\n            key: import.meta.env.VITE_ABLY_PUBLIC_KEY,\n            wsHost: \"realtime-pusher.ably.io\",\n            wsPort: 443,\n            disableStats: true,\n            encrypted: true,\n        },\n    };\n\n    echoConfig = {\n        ...defaults[config.broadcaster],\n        ...config,\n    } as EchoOptions<BroadcastDriver>;\n\n    // Reset the instance if it was already created\n    if (echoInstance) {\n        echoInstance = null;\n    }\n};\n\nexport const echo = <T extends BroadcastDriver>(): Echo<T> =>\n    getEchoInstance<T>();\n\nexport const echoIsConfigured = () => echoConfig !== null;\n","export const toArray = <T>(item: T | T[]): T[] =>\n    Array.isArray(item) ? item : [item];\n","import { type BroadcastDriver } from \"laravel-echo\";\nimport { useCallback, useEffect, useRef } from \"react\";\nimport { echo } from \"../config\";\nimport type {\n    BroadcastNotification,\n    Channel,\n    ChannelData,\n    ChannelReturnType,\n    Connection,\n    ModelEvents,\n    ModelPayload,\n} from \"../types\";\nimport { toArray } from \"../util\";\n\nconst channels: Record<string, ChannelData<BroadcastDriver>> = {};\n\nconst subscribeToChannel = <T extends BroadcastDriver>(\n    channel: Channel,\n): Connection<T> => {\n    const instance = echo<T>();\n\n    if (channel.visibility === \"presence\") {\n        return instance.join(channel.name);\n    }\n\n    if (channel.visibility === \"private\") {\n        return instance.private(channel.name);\n    }\n\n    return instance.channel(channel.name);\n};\n\nconst leaveChannel = (channel: Channel, leaveAll: boolean): void => {\n    if (!channels[channel.id]) {\n        return;\n    }\n\n    channels[channel.id].count -= 1;\n\n    if (channels[channel.id].count > 0) {\n        return;\n    }\n\n    if (leaveAll) {\n        echo().leave(channel.name);\n    } else {\n        echo().leaveChannel(channel.id);\n    }\n\n    delete channels[channel.id];\n};\n\nconst resolveChannelSubscription = <T extends BroadcastDriver>(\n    channel: Channel,\n): Connection<T> => {\n    if (channels[channel.id]) {\n        channels[channel.id].count += 1;\n\n        return channels[channel.id].connection;\n    }\n\n    const channelSubscription = subscribeToChannel<T>(channel);\n\n    channels[channel.id] = {\n        count: 1,\n        connection: channelSubscription,\n    };\n\n    return channelSubscription;\n};\n\nexport const useEcho = <\n    TPayload,\n    TDriver extends BroadcastDriver = BroadcastDriver,\n    TVisibility extends Channel[\"visibility\"] = \"private\",\n>(\n    channelName: string,\n    event: string | string[] = [],\n    callback: (payload: TPayload) => void = () => {},\n    dependencies: any[] = [],\n    visibility: TVisibility = \"private\" as TVisibility,\n) => {\n    const channel: Channel = {\n        name: channelName,\n        id: [\"private\", \"presence\"].includes(visibility)\n            ? `${visibility}-${channelName}`\n            : channelName,\n        visibility,\n    };\n\n    const callbackFunc = useCallback(callback, dependencies);\n    const listening = useRef(false);\n    const initialized = useRef(false);\n    const subscription = useRef<Connection<TDriver>>(\n        resolveChannelSubscription<TDriver>(channel),\n    );\n\n    const events = toArray(event);\n\n    const stopListening = useCallback(() => {\n        if (!listening.current) {\n            return;\n        }\n\n        events.forEach((e) => {\n            subscription.current.stopListening(e, callbackFunc);\n        });\n\n        listening.current = false;\n    }, dependencies);\n\n    const listen = useCallback(() => {\n        if (listening.current) {\n            return;\n        }\n\n        events.forEach((e) => {\n            subscription.current.listen(e, callbackFunc);\n        });\n\n        listening.current = true;\n    }, dependencies);\n\n    const tearDown = useCallback((leaveAll: boolean = false) => {\n        stopListening();\n\n        leaveChannel(channel, leaveAll);\n    }, dependencies);\n\n    useEffect(() => {\n        if (initialized.current) {\n            subscription.current = resolveChannelSubscription<TDriver>(channel);\n        }\n\n        initialized.current = true;\n\n        listen();\n\n        return tearDown;\n    }, dependencies);\n\n    return {\n        /**\n         * Leave the channel\n         */\n        leaveChannel: tearDown,\n        /**\n         * Leave the channel and also its associated private and presence channels\n         */\n        leave: () => tearDown(true),\n        /**\n         * Stop listening for event(s) without leaving the channel\n         */\n        stopListening,\n        /**\n         * Listen for event(s)\n         */\n        listen,\n        /**\n         * Channel instance\n         */\n        channel: () =>\n            subscription.current as ChannelReturnType<TDriver, TVisibility>,\n    };\n};\n\nexport const useEchoNotification = <\n    TPayload,\n    TDriver extends BroadcastDriver = BroadcastDriver,\n>(\n    channelName: string,\n    callback: (payload: BroadcastNotification<TPayload>) => void = () => {},\n    event: string | string[] = [],\n    dependencies: any[] = [],\n) => {\n    const result = useEcho<BroadcastNotification<TPayload>, TDriver, \"private\">(\n        channelName,\n        [],\n        callback,\n        dependencies,\n        \"private\",\n    );\n\n    const events = useRef(\n        toArray(event)\n            .map((e) => {\n                if (e.includes(\".\")) {\n                    return [e, e.replace(/\\./g, \"\\\\\")];\n                }\n\n                return [e, e.replace(/\\\\/g, \".\")];\n            })\n            .flat(),\n    );\n    const listening = useRef(false);\n    const initialized = useRef(false);\n\n    const cb = useCallback(\n        (notification: BroadcastNotification<TPayload>) => {\n            if (!listening.current) {\n                return;\n            }\n\n            if (\n                events.current.length === 0 ||\n                events.current.includes(notification.type)\n            ) {\n                callback(notification);\n            }\n        },\n        dependencies.concat(events.current).concat([callback]),\n    );\n\n    const listen = useCallback(() => {\n        if (listening.current) {\n            return;\n        }\n\n        if (!initialized.current) {\n            result.channel().notification(cb);\n        }\n\n        listening.current = true;\n        initialized.current = true;\n    }, [cb]);\n\n    const stopListening = useCallback(() => {\n        if (!listening.current) {\n            return;\n        }\n\n        listening.current = false;\n    }, [cb]);\n\n    useEffect(() => {\n        listen();\n    }, dependencies.concat(events.current));\n\n    return {\n        ...result,\n        /**\n         * Stop listening for notification events\n         */\n        stopListening,\n        /**\n         * Listen for notification events\n         */\n        listen,\n    };\n};\n\nexport const useEchoPresence = <\n    TPayload,\n    TDriver extends BroadcastDriver = BroadcastDriver,\n>(\n    channelName: string,\n    event: string | string[] = [],\n    callback: (payload: TPayload) => void = () => {},\n    dependencies: any[] = [],\n) => {\n    return useEcho<TPayload, TDriver, \"presence\">(\n        channelName,\n        event,\n        callback,\n        dependencies,\n        \"presence\",\n    );\n};\n\nexport const useEchoPublic = <\n    TPayload,\n    TDriver extends BroadcastDriver = BroadcastDriver,\n>(\n    channelName: string,\n    event: string | string[] = [],\n    callback: (payload: TPayload) => void = () => {},\n    dependencies: any[] = [],\n) => {\n    return useEcho<TPayload, TDriver, \"public\">(\n        channelName,\n        event,\n        callback,\n        dependencies,\n        \"public\",\n    );\n};\n\nexport const useEchoModel = <\n    TPayload,\n    TModel extends string,\n    TDriver extends BroadcastDriver = BroadcastDriver,\n>(\n    model: TModel,\n    identifier: string | number,\n    event: ModelEvents<TModel> | ModelEvents<TModel>[] = [],\n    callback: (payload: ModelPayload<TPayload>) => void = () => {},\n    dependencies: any[] = [],\n) => {\n    return useEcho<ModelPayload<TPayload>, TDriver, \"private\">(\n        `${model}.${identifier}`,\n        toArray(event).map((e) => (e.startsWith(\".\") ? e : `.${e}`)),\n        callback,\n        dependencies,\n        \"private\",\n    );\n};\n"],"names":["l","d","w","n","u","s","a","f","g","y","b","v","m","h","k","_","C","c","i","o","I","p","E","echoInstance","echoConfig","getEchoInstance","Pusher","Echo","configureEcho","config","echo","toArray","item","channels","subscribeToChannel","channel","instance","leaveChannel","leaveAll","resolveChannelSubscription","channelSubscription","useEcho","channelName","event","callback","dependencies","visibility","callbackFunc","useCallback","listening","useRef","initialized","subscription","events","stopListening","e","listen","tearDown","useEffect","useEchoPresence","useEchoPublic","useEchoModel","model","identifier"],"mappings":"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"}