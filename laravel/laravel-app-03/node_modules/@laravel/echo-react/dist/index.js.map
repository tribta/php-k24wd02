{"version":3,"file":"index.js","sources":["../../laravel-echo/dist/echo.js","../src/config/index.ts","../src/util/index.ts","../src/hooks/use-echo.ts"],"sourcesContent":["class l {\n  /**\n   * Listen for a whisper event on the channel instance.\n   */\n  listenForWhisper(e, t) {\n    return this.listen(\".client-\" + e, t);\n  }\n  /**\n   * Listen for an event on the channel instance.\n   */\n  notification(e) {\n    return this.listen(\n      \".Illuminate\\\\Notifications\\\\Events\\\\BroadcastNotificationCreated\",\n      e\n    );\n  }\n  /**\n   * Stop listening for a whisper event on the channel instance.\n   */\n  stopListeningForWhisper(e, t) {\n    return this.stopListening(\".client-\" + e, t);\n  }\n}\nclass d {\n  /**\n   * Create a new class instance.\n   */\n  constructor(e) {\n    this.namespace = e;\n  }\n  /**\n   * Format the given event name.\n   */\n  format(e) {\n    return [\".\", \"\\\\\"].includes(e.charAt(0)) ? e.substring(1) : (this.namespace && (e = this.namespace + \".\" + e), e.replace(/\\./g, \"\\\\\"));\n  }\n  /**\n   * Set the event namespace.\n   */\n  setNamespace(e) {\n    this.namespace = e;\n  }\n}\nfunction w(n) {\n  try {\n    new n();\n  } catch (e) {\n    if (e instanceof Error && e.message.includes(\"is not a constructor\"))\n      return !1;\n  }\n  return !0;\n}\nclass u extends l {\n  /**\n   * Create a new class instance.\n   */\n  constructor(e, t, s) {\n    super(), this.name = t, this.pusher = e, this.options = s, this.eventFormatter = new d(this.options.namespace), this.subscribe();\n  }\n  /**\n   * Subscribe to a Pusher channel.\n   */\n  subscribe() {\n    this.subscription = this.pusher.subscribe(this.name);\n  }\n  /**\n   * Unsubscribe from a Pusher channel.\n   */\n  unsubscribe() {\n    this.pusher.unsubscribe(this.name);\n  }\n  /**\n   * Listen for an event on the channel instance.\n   */\n  listen(e, t) {\n    return this.on(this.eventFormatter.format(e), t), this;\n  }\n  /**\n   * Listen for all events on the channel instance.\n   */\n  listenToAll(e) {\n    return this.subscription.bind_global((t, s) => {\n      if (t.startsWith(\"pusher:\"))\n        return;\n      let r = String(this.options.namespace ?? \"\").replace(\n        /\\./g,\n        \"\\\\\"\n      ), a = t.startsWith(r) ? t.substring(r.length + 1) : \".\" + t;\n      e(a, s);\n    }), this;\n  }\n  /**\n   * Stop listening for an event on the channel instance.\n   */\n  stopListening(e, t) {\n    return t ? this.subscription.unbind(\n      this.eventFormatter.format(e),\n      t\n    ) : this.subscription.unbind(this.eventFormatter.format(e)), this;\n  }\n  /**\n   * Stop listening for all events on the channel instance.\n   */\n  stopListeningToAll(e) {\n    return e ? this.subscription.unbind_global(e) : this.subscription.unbind_global(), this;\n  }\n  /**\n   * Register a callback to be called anytime a subscription succeeds.\n   */\n  subscribed(e) {\n    return this.on(\"pusher:subscription_succeeded\", () => {\n      e();\n    }), this;\n  }\n  /**\n   * Register a callback to be called anytime a subscription error occurs.\n   */\n  error(e) {\n    return this.on(\"pusher:subscription_error\", (t) => {\n      e(t);\n    }), this;\n  }\n  /**\n   * Bind a channel to an event.\n   */\n  on(e, t) {\n    return this.subscription.bind(e, t), this;\n  }\n}\nclass f extends u {\n  /**\n   * Send a whisper event to other clients in the channel.\n   */\n  whisper(e, t) {\n    return this.pusher.channels.channels[this.name].trigger(\n      `client-${e}`,\n      t\n    ), this;\n  }\n}\nclass g extends u {\n  /**\n   * Send a whisper event to other clients in the channel.\n   */\n  whisper(e, t) {\n    return this.pusher.channels.channels[this.name].trigger(\n      `client-${e}`,\n      t\n    ), this;\n  }\n}\nclass y extends f {\n  /**\n   * Register a callback to be called anytime the member list changes.\n   */\n  here(e) {\n    return this.on(\"pusher:subscription_succeeded\", (t) => {\n      e(Object.keys(t.members).map((s) => t.members[s]));\n    }), this;\n  }\n  /**\n   * Listen for someone joining the channel.\n   */\n  joining(e) {\n    return this.on(\"pusher:member_added\", (t) => {\n      e(t.info);\n    }), this;\n  }\n  /**\n   * Send a whisper event to other clients in the channel.\n   */\n  whisper(e, t) {\n    return this.pusher.channels.channels[this.name].trigger(\n      `client-${e}`,\n      t\n    ), this;\n  }\n  /**\n   * Listen for someone leaving the channel.\n   */\n  leaving(e) {\n    return this.on(\"pusher:member_removed\", (t) => {\n      e(t.info);\n    }), this;\n  }\n}\nclass b extends l {\n  /**\n   * Create a new class instance.\n   */\n  constructor(e, t, s) {\n    super(), this.events = {}, this.listeners = {}, this.name = t, this.socket = e, this.options = s, this.eventFormatter = new d(this.options.namespace), this.subscribe();\n  }\n  /**\n   * Subscribe to a Socket.io channel.\n   */\n  subscribe() {\n    this.socket.emit(\"subscribe\", {\n      channel: this.name,\n      auth: this.options.auth || {}\n    });\n  }\n  /**\n   * Unsubscribe from channel and ubind event callbacks.\n   */\n  unsubscribe() {\n    this.unbind(), this.socket.emit(\"unsubscribe\", {\n      channel: this.name,\n      auth: this.options.auth || {}\n    });\n  }\n  /**\n   * Listen for an event on the channel instance.\n   */\n  listen(e, t) {\n    return this.on(this.eventFormatter.format(e), t), this;\n  }\n  /**\n   * Stop listening for an event on the channel instance.\n   */\n  stopListening(e, t) {\n    return this.unbindEvent(this.eventFormatter.format(e), t), this;\n  }\n  /**\n   * Register a callback to be called anytime a subscription succeeds.\n   */\n  subscribed(e) {\n    return this.on(\"connect\", (t) => {\n      e(t);\n    }), this;\n  }\n  /**\n   * Register a callback to be called anytime an error occurs.\n   */\n  error(e) {\n    return this;\n  }\n  /**\n   * Bind the channel's socket to an event and store the callback.\n   */\n  on(e, t) {\n    return this.listeners[e] = this.listeners[e] || [], this.events[e] || (this.events[e] = (s, r) => {\n      this.name === s && this.listeners[e] && this.listeners[e].forEach((a) => a(r));\n    }, this.socket.on(e, this.events[e])), this.listeners[e].push(t), this;\n  }\n  /**\n   * Unbind the channel's socket from all stored event callbacks.\n   */\n  unbind() {\n    Object.keys(this.events).forEach((e) => {\n      this.unbindEvent(e);\n    });\n  }\n  /**\n   * Unbind the listeners for the given event.\n   */\n  unbindEvent(e, t) {\n    this.listeners[e] = this.listeners[e] || [], t && (this.listeners[e] = this.listeners[e].filter(\n      (s) => s !== t\n    )), (!t || this.listeners[e].length === 0) && (this.events[e] && (this.socket.removeListener(e, this.events[e]), delete this.events[e]), delete this.listeners[e]);\n  }\n}\nclass v extends b {\n  /**\n   * Send a whisper event to other clients in the channel.\n   */\n  whisper(e, t) {\n    return this.socket.emit(\"client event\", {\n      channel: this.name,\n      event: `client-${e}`,\n      data: t\n    }), this;\n  }\n}\nclass m extends v {\n  /**\n   * Register a callback to be called anytime the member list changes.\n   */\n  here(e) {\n    return this.on(\"presence:subscribed\", (t) => {\n      e(t.map((s) => s.user_info));\n    }), this;\n  }\n  /**\n   * Listen for someone joining the channel.\n   */\n  joining(e) {\n    return this.on(\n      \"presence:joining\",\n      (t) => e(t.user_info)\n    ), this;\n  }\n  /**\n   * Send a whisper event to other clients in the channel.\n   */\n  whisper(e, t) {\n    return this.socket.emit(\"client event\", {\n      channel: this.name,\n      event: `client-${e}`,\n      data: t\n    }), this;\n  }\n  /**\n   * Listen for someone leaving the channel.\n   */\n  leaving(e) {\n    return this.on(\n      \"presence:leaving\",\n      (t) => e(t.user_info)\n    ), this;\n  }\n}\nclass h extends l {\n  /**\n   * Subscribe to a channel.\n   */\n  subscribe() {\n  }\n  /**\n   * Unsubscribe from a channel.\n   */\n  unsubscribe() {\n  }\n  /**\n   * Listen for an event on the channel instance.\n   */\n  listen(e, t) {\n    return this;\n  }\n  /**\n   * Listen for all events on the channel instance.\n   */\n  listenToAll(e) {\n    return this;\n  }\n  /**\n   * Stop listening for an event on the channel instance.\n   */\n  stopListening(e, t) {\n    return this;\n  }\n  /**\n   * Register a callback to be called anytime a subscription succeeds.\n   */\n  subscribed(e) {\n    return this;\n  }\n  /**\n   * Register a callback to be called anytime an error occurs.\n   */\n  error(e) {\n    return this;\n  }\n  /**\n   * Bind a channel to an event.\n   */\n  on(e, t) {\n    return this;\n  }\n}\nclass k extends h {\n  /**\n   * Send a whisper event to other clients in the channel.\n   */\n  whisper(e, t) {\n    return this;\n  }\n}\nclass _ extends h {\n  /**\n   * Send a whisper event to other clients in the channel.\n   */\n  whisper(e, t) {\n    return this;\n  }\n}\nclass C extends k {\n  /**\n   * Register a callback to be called anytime the member list changes.\n   */\n  here(e) {\n    return this;\n  }\n  /**\n   * Listen for someone joining the channel.\n   */\n  joining(e) {\n    return this;\n  }\n  /**\n   * Send a whisper event to other clients in the channel.\n   */\n  whisper(e, t) {\n    return this;\n  }\n  /**\n   * Listen for someone leaving the channel.\n   */\n  leaving(e) {\n    return this;\n  }\n}\nconst c = class c {\n  /**\n   * Create a new class instance.\n   */\n  constructor(e) {\n    this.setOptions(e), this.connect();\n  }\n  /**\n   * Merge the custom options with the defaults.\n   */\n  setOptions(e) {\n    this.options = {\n      ...c._defaultOptions,\n      ...e,\n      broadcaster: e.broadcaster\n    };\n    let t = this.csrfToken();\n    t && (this.options.auth.headers[\"X-CSRF-TOKEN\"] = t, this.options.userAuthentication.headers[\"X-CSRF-TOKEN\"] = t), t = this.options.bearerToken, t && (this.options.auth.headers.Authorization = \"Bearer \" + t, this.options.userAuthentication.headers.Authorization = \"Bearer \" + t);\n  }\n  /**\n   * Extract the CSRF token from the page.\n   */\n  csrfToken() {\n    var e, t;\n    return typeof window < \"u\" && ((e = window.Laravel) != null && e.csrfToken) ? window.Laravel.csrfToken : this.options.csrfToken ? this.options.csrfToken : typeof document < \"u\" && typeof document.querySelector == \"function\" ? ((t = document.querySelector('meta[name=\"csrf-token\"]')) == null ? void 0 : t.getAttribute(\"content\")) ?? null : null;\n  }\n};\nc._defaultOptions = {\n  auth: {\n    headers: {}\n  },\n  authEndpoint: \"/broadcasting/auth\",\n  userAuthentication: {\n    endpoint: \"/broadcasting/user-auth\",\n    headers: {}\n  },\n  csrfToken: null,\n  bearerToken: null,\n  host: null,\n  key: null,\n  namespace: \"App.Events\"\n};\nlet i = c;\nclass o extends i {\n  constructor() {\n    super(...arguments), this.channels = {};\n  }\n  /**\n   * Create a fresh Pusher connection.\n   */\n  connect() {\n    if (typeof this.options.client < \"u\")\n      this.pusher = this.options.client;\n    else if (this.options.Pusher)\n      this.pusher = new this.options.Pusher(\n        this.options.key,\n        this.options\n      );\n    else if (typeof window < \"u\" && typeof window.Pusher < \"u\")\n      this.pusher = new window.Pusher(this.options.key, this.options);\n    else\n      throw new Error(\n        \"Pusher client not found. Should be globally available or passed via options.client\"\n      );\n  }\n  /**\n   * Sign in the user via Pusher user authentication (https://pusher.com/docs/channels/using_channels/user-authentication/).\n   */\n  signin() {\n    this.pusher.signin();\n  }\n  /**\n   * Listen for an event on a channel instance.\n   */\n  listen(e, t, s) {\n    return this.channel(e).listen(t, s);\n  }\n  /**\n   * Get a channel instance by name.\n   */\n  channel(e) {\n    return this.channels[e] || (this.channels[e] = new u(\n      this.pusher,\n      e,\n      this.options\n    )), this.channels[e];\n  }\n  /**\n   * Get a private channel instance by name.\n   */\n  privateChannel(e) {\n    return this.channels[\"private-\" + e] || (this.channels[\"private-\" + e] = new f(\n      this.pusher,\n      \"private-\" + e,\n      this.options\n    )), this.channels[\"private-\" + e];\n  }\n  /**\n   * Get a private encrypted channel instance by name.\n   */\n  encryptedPrivateChannel(e) {\n    return this.channels[\"private-encrypted-\" + e] || (this.channels[\"private-encrypted-\" + e] = new g(\n      this.pusher,\n      \"private-encrypted-\" + e,\n      this.options\n    )), this.channels[\"private-encrypted-\" + e];\n  }\n  /**\n   * Get a presence channel instance by name.\n   */\n  presenceChannel(e) {\n    return this.channels[\"presence-\" + e] || (this.channels[\"presence-\" + e] = new y(\n      this.pusher,\n      \"presence-\" + e,\n      this.options\n    )), this.channels[\"presence-\" + e];\n  }\n  /**\n   * Leave the given channel, as well as its private and presence variants.\n   */\n  leave(e) {\n    [\n      e,\n      \"private-\" + e,\n      \"private-encrypted-\" + e,\n      \"presence-\" + e\n    ].forEach((s) => {\n      this.leaveChannel(s);\n    });\n  }\n  /**\n   * Leave the given channel.\n   */\n  leaveChannel(e) {\n    this.channels[e] && (this.channels[e].unsubscribe(), delete this.channels[e]);\n  }\n  /**\n   * Get the socket ID for the connection.\n   */\n  socketId() {\n    return this.pusher.connection.socket_id;\n  }\n  /**\n   * Disconnect Pusher connection.\n   */\n  disconnect() {\n    this.pusher.disconnect();\n  }\n}\nclass I extends i {\n  constructor() {\n    super(...arguments), this.channels = {};\n  }\n  /**\n   * Create a fresh Socket.io connection.\n   */\n  connect() {\n    let e = this.getSocketIO();\n    this.socket = e(\n      this.options.host ?? void 0,\n      this.options\n    ), this.socket.io.on(\"reconnect\", () => {\n      Object.values(this.channels).forEach((t) => {\n        t.subscribe();\n      });\n    });\n  }\n  /**\n   * Get socket.io module from global scope or options.\n   */\n  getSocketIO() {\n    if (typeof this.options.client < \"u\")\n      return this.options.client;\n    if (typeof window < \"u\" && typeof window.io < \"u\")\n      return window.io;\n    throw new Error(\n      \"Socket.io client not found. Should be globally available or passed via options.client\"\n    );\n  }\n  /**\n   * Listen for an event on a channel instance.\n   */\n  listen(e, t, s) {\n    return this.channel(e).listen(t, s);\n  }\n  /**\n   * Get a channel instance by name.\n   */\n  channel(e) {\n    return this.channels[e] || (this.channels[e] = new b(\n      this.socket,\n      e,\n      this.options\n    )), this.channels[e];\n  }\n  /**\n   * Get a private channel instance by name.\n   */\n  privateChannel(e) {\n    return this.channels[\"private-\" + e] || (this.channels[\"private-\" + e] = new v(\n      this.socket,\n      \"private-\" + e,\n      this.options\n    )), this.channels[\"private-\" + e];\n  }\n  /**\n   * Get a presence channel instance by name.\n   */\n  presenceChannel(e) {\n    return this.channels[\"presence-\" + e] || (this.channels[\"presence-\" + e] = new m(\n      this.socket,\n      \"presence-\" + e,\n      this.options\n    )), this.channels[\"presence-\" + e];\n  }\n  /**\n   * Leave the given channel, as well as its private and presence variants.\n   */\n  leave(e) {\n    [e, \"private-\" + e, \"presence-\" + e].forEach((s) => {\n      this.leaveChannel(s);\n    });\n  }\n  /**\n   * Leave the given channel.\n   */\n  leaveChannel(e) {\n    this.channels[e] && (this.channels[e].unsubscribe(), delete this.channels[e]);\n  }\n  /**\n   * Get the socket ID for the connection.\n   */\n  socketId() {\n    return this.socket.id;\n  }\n  /**\n   * Disconnect Socketio connection.\n   */\n  disconnect() {\n    this.socket.disconnect();\n  }\n}\nclass p extends i {\n  constructor() {\n    super(...arguments), this.channels = {};\n  }\n  /**\n   * Create a fresh connection.\n   */\n  connect() {\n  }\n  /**\n   * Listen for an event on a channel instance.\n   */\n  listen(e, t, s) {\n    return new h();\n  }\n  /**\n   * Get a channel instance by name.\n   */\n  channel(e) {\n    return new h();\n  }\n  /**\n   * Get a private channel instance by name.\n   */\n  privateChannel(e) {\n    return new k();\n  }\n  /**\n   * Get a private encrypted channel instance by name.\n   */\n  encryptedPrivateChannel(e) {\n    return new _();\n  }\n  /**\n   * Get a presence channel instance by name.\n   */\n  presenceChannel(e) {\n    return new C();\n  }\n  /**\n   * Leave the given channel, as well as its private and presence variants.\n   */\n  leave(e) {\n  }\n  /**\n   * Leave the given channel.\n   */\n  leaveChannel(e) {\n  }\n  /**\n   * Get the socket ID for the connection.\n   */\n  socketId() {\n    return \"fake-socket-id\";\n  }\n  /**\n   * Disconnect the connection.\n   */\n  disconnect() {\n  }\n}\nclass E {\n  /**\n   * Create a new class instance.\n   */\n  constructor(e) {\n    this.options = e, this.connect(), this.options.withoutInterceptors || this.registerInterceptors();\n  }\n  /**\n   * Get a channel instance by name.\n   */\n  channel(e) {\n    return this.connector.channel(e);\n  }\n  /**\n   * Create a new connection.\n   */\n  connect() {\n    if (this.options.broadcaster === \"reverb\")\n      this.connector = new o({\n        ...this.options,\n        cluster: \"\"\n      });\n    else if (this.options.broadcaster === \"pusher\")\n      this.connector = new o(this.options);\n    else if (this.options.broadcaster === \"ably\")\n      this.connector = new o({\n        ...this.options,\n        cluster: \"\",\n        broadcaster: \"pusher\"\n      });\n    else if (this.options.broadcaster === \"socket.io\")\n      this.connector = new I(this.options);\n    else if (this.options.broadcaster === \"null\")\n      this.connector = new p(this.options);\n    else if (typeof this.options.broadcaster == \"function\" && w(this.options.broadcaster))\n      this.connector = new this.options.broadcaster(this.options);\n    else\n      throw new Error(\n        `Broadcaster ${typeof this.options.broadcaster} ${String(this.options.broadcaster)} is not supported.`\n      );\n  }\n  /**\n   * Disconnect from the Echo server.\n   */\n  disconnect() {\n    this.connector.disconnect();\n  }\n  /**\n   * Get a presence channel instance by name.\n   */\n  join(e) {\n    return this.connector.presenceChannel(e);\n  }\n  /**\n   * Leave the given channel, as well as its private and presence variants.\n   */\n  leave(e) {\n    this.connector.leave(e);\n  }\n  /**\n   * Leave the given channel.\n   */\n  leaveChannel(e) {\n    this.connector.leaveChannel(e);\n  }\n  /**\n   * Leave all channels.\n   */\n  leaveAllChannels() {\n    for (const e in this.connector.channels)\n      this.leaveChannel(e);\n  }\n  /**\n   * Listen for an event on a channel instance.\n   */\n  listen(e, t, s) {\n    return this.connector.listen(e, t, s);\n  }\n  /**\n   * Get a private channel instance by name.\n   */\n  private(e) {\n    return this.connector.privateChannel(e);\n  }\n  /**\n   * Get a private encrypted channel instance by name.\n   */\n  encryptedPrivate(e) {\n    if (this.connectorSupportsEncryptedPrivateChannels(this.connector))\n      return this.connector.encryptedPrivateChannel(e);\n    throw new Error(\n      `Broadcaster ${typeof this.options.broadcaster} ${String(\n        this.options.broadcaster\n      )} does not support encrypted private channels.`\n    );\n  }\n  connectorSupportsEncryptedPrivateChannels(e) {\n    return e instanceof o || e instanceof p;\n  }\n  /**\n   * Get the Socket ID for the connection.\n   */\n  socketId() {\n    return this.connector.socketId();\n  }\n  /**\n   * Register 3rd party request interceptiors. These are used to automatically\n   * send a connections socket id to a Laravel app with a X-Socket-Id header.\n   */\n  registerInterceptors() {\n    typeof Vue < \"u\" && (Vue != null && Vue.http) && this.registerVueRequestInterceptor(), typeof axios == \"function\" && this.registerAxiosRequestInterceptor(), typeof jQuery == \"function\" && this.registerjQueryAjaxSetup(), typeof Turbo == \"object\" && this.registerTurboRequestInterceptor();\n  }\n  /**\n   * Register a Vue HTTP interceptor to add the X-Socket-ID header.\n   */\n  registerVueRequestInterceptor() {\n    Vue.http.interceptors.push(\n      (e, t) => {\n        this.socketId() && e.headers.set(\"X-Socket-ID\", this.socketId()), t();\n      }\n    );\n  }\n  /**\n   * Register an Axios HTTP interceptor to add the X-Socket-ID header.\n   */\n  registerAxiosRequestInterceptor() {\n    axios.interceptors.request.use(\n      (e) => (this.socketId() && (e.headers[\"X-Socket-Id\"] = this.socketId()), e)\n    );\n  }\n  /**\n   * Register jQuery AjaxPrefilter to add the X-Socket-ID header.\n   */\n  registerjQueryAjaxSetup() {\n    typeof jQuery.ajax < \"u\" && jQuery.ajaxPrefilter(\n      (e, t, s) => {\n        this.socketId() && s.setRequestHeader(\"X-Socket-Id\", this.socketId());\n      }\n    );\n  }\n  /**\n   * Register the Turbo Request interceptor to add the X-Socket-ID header.\n   */\n  registerTurboRequestInterceptor() {\n    document.addEventListener(\n      \"turbo:before-fetch-request\",\n      (e) => {\n        e.detail.fetchOptions.headers[\"X-Socket-Id\"] = this.socketId();\n      }\n    );\n  }\n}\nexport {\n  l as Channel,\n  i as Connector,\n  d as EventFormatter,\n  E as default\n};\n//# sourceMappingURL=echo.js.map\n","import Echo, { type BroadcastDriver, type EchoOptions } from \"laravel-echo\";\nimport Pusher from \"pusher-js\";\nimport type { ConfigDefaults } from \"../types\";\n\nlet echoInstance: Echo<BroadcastDriver> | null = null;\nlet echoConfig: EchoOptions<BroadcastDriver> | null = null;\n\nconst getEchoInstance = <T extends BroadcastDriver>(): Echo<T> => {\n    if (echoInstance) {\n        return echoInstance as Echo<T>;\n    }\n\n    if (!echoConfig) {\n        throw new Error(\n            \"Echo has not been configured. Please call `configureEcho()`.\",\n        );\n    }\n\n    echoConfig.Pusher ??= Pusher;\n\n    echoInstance = new Echo(echoConfig);\n\n    return echoInstance as Echo<T>;\n};\n\n/**\n * Configure the Echo instance with sensible defaults.\n *\n * @link https://laravel.com/docs/broadcasting#client-side-installation\n */\nexport const configureEcho = <T extends BroadcastDriver>(\n    config: EchoOptions<T>,\n): void => {\n    const defaults: ConfigDefaults<BroadcastDriver> = {\n        reverb: {\n            broadcaster: \"reverb\",\n            key: import.meta.env.VITE_REVERB_APP_KEY,\n            wsHost: import.meta.env.VITE_REVERB_HOST,\n            wsPort: import.meta.env.VITE_REVERB_PORT,\n            wssPort: import.meta.env.VITE_REVERB_PORT,\n            forceTLS:\n                (import.meta.env.VITE_REVERB_SCHEME ?? \"https\") === \"https\",\n            enabledTransports: [\"ws\", \"wss\"],\n        },\n        pusher: {\n            broadcaster: \"pusher\",\n            key: import.meta.env.VITE_PUSHER_APP_KEY,\n            cluster: import.meta.env.VITE_PUSHER_APP_CLUSTER,\n            forceTLS: true,\n            wsHost: import.meta.env.VITE_PUSHER_HOST,\n            wsPort: import.meta.env.VITE_PUSHER_PORT,\n            wssPort: import.meta.env.VITE_PUSHER_PORT,\n            enabledTransports: [\"ws\", \"wss\"],\n        },\n        \"socket.io\": {\n            broadcaster: \"socket.io\",\n            host: import.meta.env.VITE_SOCKET_IO_HOST,\n        },\n        null: {\n            broadcaster: \"null\",\n        },\n        ably: {\n            broadcaster: \"pusher\",\n            key: import.meta.env.VITE_ABLY_PUBLIC_KEY,\n            wsHost: \"realtime-pusher.ably.io\",\n            wsPort: 443,\n            disableStats: true,\n            encrypted: true,\n        },\n    };\n\n    echoConfig = {\n        ...defaults[config.broadcaster],\n        ...config,\n    } as EchoOptions<BroadcastDriver>;\n\n    // Reset the instance if it was already created\n    if (echoInstance) {\n        echoInstance = null;\n    }\n};\n\nexport const echo = <T extends BroadcastDriver>(): Echo<T> =>\n    getEchoInstance<T>();\n\nexport const echoIsConfigured = () => echoConfig !== null;\n","export const toArray = <T>(item: T | T[]): T[] =>\n    Array.isArray(item) ? item : [item];\n","import { type BroadcastDriver } from \"laravel-echo\";\nimport { useCallback, useEffect, useRef } from \"react\";\nimport { echo } from \"../config\";\nimport type {\n    BroadcastNotification,\n    Channel,\n    ChannelData,\n    ChannelReturnType,\n    Connection,\n    ModelEvents,\n    ModelPayload,\n} from \"../types\";\nimport { toArray } from \"../util\";\n\nconst channels: Record<string, ChannelData<BroadcastDriver>> = {};\n\nconst subscribeToChannel = <T extends BroadcastDriver>(\n    channel: Channel,\n): Connection<T> => {\n    const instance = echo<T>();\n\n    if (channel.visibility === \"presence\") {\n        return instance.join(channel.name);\n    }\n\n    if (channel.visibility === \"private\") {\n        return instance.private(channel.name);\n    }\n\n    return instance.channel(channel.name);\n};\n\nconst leaveChannel = (channel: Channel, leaveAll: boolean): void => {\n    if (!channels[channel.id]) {\n        return;\n    }\n\n    channels[channel.id].count -= 1;\n\n    if (channels[channel.id].count > 0) {\n        return;\n    }\n\n    if (leaveAll) {\n        echo().leave(channel.name);\n    } else {\n        echo().leaveChannel(channel.id);\n    }\n\n    delete channels[channel.id];\n};\n\nconst resolveChannelSubscription = <T extends BroadcastDriver>(\n    channel: Channel,\n): Connection<T> => {\n    if (channels[channel.id]) {\n        channels[channel.id].count += 1;\n\n        return channels[channel.id].connection;\n    }\n\n    const channelSubscription = subscribeToChannel<T>(channel);\n\n    channels[channel.id] = {\n        count: 1,\n        connection: channelSubscription,\n    };\n\n    return channelSubscription;\n};\n\nexport const useEcho = <\n    TPayload,\n    TDriver extends BroadcastDriver = BroadcastDriver,\n    TVisibility extends Channel[\"visibility\"] = \"private\",\n>(\n    channelName: string,\n    event: string | string[] = [],\n    callback: (payload: TPayload) => void = () => {},\n    dependencies: any[] = [],\n    visibility: TVisibility = \"private\" as TVisibility,\n) => {\n    const channel: Channel = {\n        name: channelName,\n        id: [\"private\", \"presence\"].includes(visibility)\n            ? `${visibility}-${channelName}`\n            : channelName,\n        visibility,\n    };\n\n    const callbackFunc = useCallback(callback, dependencies);\n    const listening = useRef(false);\n    const initialized = useRef(false);\n    const subscription = useRef<Connection<TDriver>>(\n        resolveChannelSubscription<TDriver>(channel),\n    );\n\n    const events = toArray(event);\n\n    const stopListening = useCallback(() => {\n        if (!listening.current) {\n            return;\n        }\n\n        events.forEach((e) => {\n            subscription.current.stopListening(e, callbackFunc);\n        });\n\n        listening.current = false;\n    }, dependencies);\n\n    const listen = useCallback(() => {\n        if (listening.current) {\n            return;\n        }\n\n        events.forEach((e) => {\n            subscription.current.listen(e, callbackFunc);\n        });\n\n        listening.current = true;\n    }, dependencies);\n\n    const tearDown = useCallback((leaveAll: boolean = false) => {\n        stopListening();\n\n        leaveChannel(channel, leaveAll);\n    }, dependencies);\n\n    useEffect(() => {\n        if (initialized.current) {\n            subscription.current = resolveChannelSubscription<TDriver>(channel);\n        }\n\n        initialized.current = true;\n\n        listen();\n\n        return tearDown;\n    }, dependencies);\n\n    return {\n        /**\n         * Leave the channel\n         */\n        leaveChannel: tearDown,\n        /**\n         * Leave the channel and also its associated private and presence channels\n         */\n        leave: () => tearDown(true),\n        /**\n         * Stop listening for event(s) without leaving the channel\n         */\n        stopListening,\n        /**\n         * Listen for event(s)\n         */\n        listen,\n        /**\n         * Channel instance\n         */\n        channel: () =>\n            subscription.current as ChannelReturnType<TDriver, TVisibility>,\n    };\n};\n\nexport const useEchoNotification = <\n    TPayload,\n    TDriver extends BroadcastDriver = BroadcastDriver,\n>(\n    channelName: string,\n    callback: (payload: BroadcastNotification<TPayload>) => void = () => {},\n    event: string | string[] = [],\n    dependencies: any[] = [],\n) => {\n    const result = useEcho<BroadcastNotification<TPayload>, TDriver, \"private\">(\n        channelName,\n        [],\n        callback,\n        dependencies,\n        \"private\",\n    );\n\n    const events = useRef(\n        toArray(event)\n            .map((e) => {\n                if (e.includes(\".\")) {\n                    return [e, e.replace(/\\./g, \"\\\\\")];\n                }\n\n                return [e, e.replace(/\\\\/g, \".\")];\n            })\n            .flat(),\n    );\n    const listening = useRef(false);\n    const initialized = useRef(false);\n\n    const cb = useCallback(\n        (notification: BroadcastNotification<TPayload>) => {\n            if (!listening.current) {\n                return;\n            }\n\n            if (\n                events.current.length === 0 ||\n                events.current.includes(notification.type)\n            ) {\n                callback(notification);\n            }\n        },\n        dependencies.concat(events.current).concat([callback]),\n    );\n\n    const listen = useCallback(() => {\n        if (listening.current) {\n            return;\n        }\n\n        if (!initialized.current) {\n            result.channel().notification(cb);\n        }\n\n        listening.current = true;\n        initialized.current = true;\n    }, [cb]);\n\n    const stopListening = useCallback(() => {\n        if (!listening.current) {\n            return;\n        }\n\n        listening.current = false;\n    }, [cb]);\n\n    useEffect(() => {\n        listen();\n    }, dependencies.concat(events.current));\n\n    return {\n        ...result,\n        /**\n         * Stop listening for notification events\n         */\n        stopListening,\n        /**\n         * Listen for notification events\n         */\n        listen,\n    };\n};\n\nexport const useEchoPresence = <\n    TPayload,\n    TDriver extends BroadcastDriver = BroadcastDriver,\n>(\n    channelName: string,\n    event: string | string[] = [],\n    callback: (payload: TPayload) => void = () => {},\n    dependencies: any[] = [],\n) => {\n    return useEcho<TPayload, TDriver, \"presence\">(\n        channelName,\n        event,\n        callback,\n        dependencies,\n        \"presence\",\n    );\n};\n\nexport const useEchoPublic = <\n    TPayload,\n    TDriver extends BroadcastDriver = BroadcastDriver,\n>(\n    channelName: string,\n    event: string | string[] = [],\n    callback: (payload: TPayload) => void = () => {},\n    dependencies: any[] = [],\n) => {\n    return useEcho<TPayload, TDriver, \"public\">(\n        channelName,\n        event,\n        callback,\n        dependencies,\n        \"public\",\n    );\n};\n\nexport const useEchoModel = <\n    TPayload,\n    TModel extends string,\n    TDriver extends BroadcastDriver = BroadcastDriver,\n>(\n    model: TModel,\n    identifier: string | number,\n    event: ModelEvents<TModel> | ModelEvents<TModel>[] = [],\n    callback: (payload: ModelPayload<TPayload>) => void = () => {},\n    dependencies: any[] = [],\n) => {\n    return useEcho<ModelPayload<TPayload>, TDriver, \"private\">(\n        `${model}.${identifier}`,\n        toArray(event).map((e) => (e.startsWith(\".\") ? e : `.${e}`)),\n        callback,\n        dependencies,\n        \"private\",\n    );\n};\n"],"names":["l","d","w","n","u","s","r","a","f","g","y","b","v","m","h","k","_","C","c","i","o","I","p","E","echoInstance","echoConfig","getEchoInstance","Pusher","Echo","configureEcho","config","echo","echoIsConfigured","toArray","item","channels","subscribeToChannel","channel","instance","leaveChannel","leaveAll","resolveChannelSubscription","channelSubscription","useEcho","channelName","event","callback","dependencies","visibility","callbackFunc","useCallback","listening","useRef","initialized","subscription","events","stopListening","e","listen","tearDown","useEffect","useEchoNotification","result","cb","notification","useEchoPresence","useEchoPublic","useEchoModel","model","identifier"],"mappings":"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"}